/*! Brunch-Web 2019-06-24 */ ! function(a) {
    var b = function() {};
    b.prototype = {
        initialize: function() {
            var b = 1600,
                c = 1e3,
                d = b / c,
                e = function() {
                    var b = a(window).width() / a(window).height();
                    d > b ? (f.addClass("vertical"), f.removeClass("horizontal"), f.css("marginLeft", -f.width() / 2), f.css("marginTop", "")) : (f.addClass("horizontal"), f.removeClass("vertical"), f.css("marginLeft", ""), f.css("marginTop", -f.height() / 2))
                },
                f = a(".bg_start img");
            f.on("load", function() {
                a(this).css("opacity", 1), e()
            }), a(window).on("resize", e);
            var g = ["../resources/img/popcorn.jpg", "../resources/img/popcorn.jpg"],
                h = parseInt(100 * Math.random() % g.length);
            f.attr("src", g[h]), jQuery("#rememberMe").on("click", function(a) {
                var b = !!a.target.checked;
                jQuery.cookie("IRM", b ? "1" : "0")
            })
        }
    }, B.Sign.Signin = new b
}(jQuery),
function(a) {
    var b = !1,
        c = function() {};
    c.prototype = {
        REGEXP_USERNAME: /^[a-zA-Zㄱ-ㅎㅏ-ㅣ가-힣]+(?:[\s][a-zA-Zㄱ-ㅎㅏ-ㅣ가-힣]+)*$/,
        REGEXP_EMAIL: /^[a-zA-Z0-9\+\._%\-]{1,256}@[a-zA-Z0-9][a-zA-Z0-9\-]{0,64}(\.[a-zA-Z0-9][a-zA-Z0-9\-]{0,25})+$/,
        ERROR_USERNAME_LENGTH: "2자 이상 30자 이하로 입력해 주세요.",
        ERROR_USERNAME: "한글, 영문, 띄어쓰기만 사용할 수 있습니다.",
        ERROR_EMAIL: "유효하지 않은 이메일 주소입니다.",
        ERROR_EMAIL_ALREADY_EXIST_MOBILE: "다른 SNS 계정${providerString}에 연결되어 있습니다.",
        ERROR_EMAIL_ALREADY_EXIST: "다른 SNS 계정${providerString}에 연결되어 있는 이메일 주소입니다.",
        ERROR_USER_ALREADY_AGREE: "이미 가입되어 있는 계정입니다.",
        ALERT_USERNAME: "이름을 입력해 주세요.",
        ALERT_EMAIL: "이메일을 입력해 주세요.",
        ALERT_AGREE_SERVICE: "서비스 이용 약관에 동의해 주세요.",
        ALERT_AGREE_PRIVACY: "개인정보 수집 및 이용에 동의해 주세요.",
        initialize: function(c) {
            b = "mobile" == a.userAgent.platform, this.userNameWrap = a(".username"), this.userNameInput = a(".username input"), this.userNameError = a(".username .error"), this.emailWrap = a(".email"), this.emailInput = a(".email input"), this.emailError = a(".email .error"), this.userNamePlaceholder = a(".username .placeholder"), this.emailPlaceholder = a(".email .placeholder"), this.placeholder = a(".placeholder"), this.mobileSubmitWrap = a(".wrap_btn_start"), this.agreeService = a("#agreeService"), this.agreeServiceLabel = a("#agreeServiceLabel"), this.agreePrivacy = a("#agreePrivacy"), this.agreePrivacyLabel = a("#agreePrivacyLabel"), this.agreeAd = a("#agreeAd"), this.agreeAdLabel = a("#agreeAdLabel"), this.agreeAdInfo = a("#agreeAdInfo"), this.agreeAll = a("#agreeAll"), this.agreeAllLabel = a("#agreeAllLabel"), this.signForm = a("#signform"), this.signFormBack = a("#signFormBack"), this.signFormSubmitPre = a("#signFormSubmitPre"), this.signFormSubmit = a("#signFormSubmit"), this.signFormRetry = a("#signFormRetry"), this.signFormForgot = a("#signFormForgot"), this.signFormForgotAnchor = b ? this.signFormForgot : a("#signFormForgot a"), this.termsStepPolicy = a("#termsStepPolicy"), this.termsStepUser = a("#termsStepUser"), this.termsStepUser.hide(), this.bindEvents(), c ? (c.userName && (this.userNameInput.val(c.userName), B.Sign.Termsofuse.checkUsername(this.convertPossibleUsername(this.userNameInput.val())), this.userNamePlaceholder.hide()), c.email ? (this.emailInput.val(c.email), B.Sign.Termsofuse.checkEmail(this.emailInput.val()), this.emailPlaceholder.hide()) : this.emailWrap.removeClass("regist_allow")) : this.clean();
            var d = function() {
                var a = new Date;
                return a.getFullYear() + "." + (a.getMonth() + 1) + "." + a.getDate()
            };
            this.agreeAdInfo.append(d() + " 브런치 이벤트 정보 수신에 동의합니다."), this.agreeAdInfoFunc = function(a) {
                a ? B.M.showToast(d() + " 브런치 이벤트 정보 수신에 동의합니다.") : B.M.showToast(d() + " 브런치 이벤트 정보 <br>수신 동의를 철회했습니다.")
            }, this.forgotEmailUrl = "/signin/find_account"
        },
        bindEvents: function() {
            var c = this;
            this.placeholder.click(function() {
                var b = a(this).data();
                b && b.target && (a("#" + b.target).focus(), a(this).hide())
            }), this.userNameInput.on("focus", function() {
                c.userNamePlaceholder.hide(), i()
            }), this.userNameInput.on("blur", function() {
                var b = a(this).val();
                a(this).val(b.trim()), b ? c.checkUsername(c.convertPossibleUsername(b)) : (c.userNamePlaceholder.show(), c.userNameError.hide(), c.userNameWrap.removeClass("regist_allow regist_deny"))
            }), this.emailInput.on("focus", function() {
                c.emailPlaceholder.hide(), i()
            }), this.emailInput.on("blur", function() {
                var b = a(this).val();
                b && "" != b.trim() ? c.checkEmail(b) : (c.emailPlaceholder.show(), c.emailError.hide(), c.emailWrap.removeClass("regist_allow regist_deny"))
            }), this.signFormForgotAnchor.on("click", function() {
                if (c.emailWrap.hasClass("regist_deny") && c.emailError.find("span").length) {
                    var a = c.forgotEmailUrl + "?email=" + c.signFormForgotAnchor.attr("data-error-email");
                    c.signFormForgotAnchor.attr("href", a)
                }
            });
            var d = function(a) {
                    return c.agreeAd.get(0).checked ? c.agreeAd.val("Y") : c.agreeAd.val("N"), c.checkAgreeServiceCondition() ? !!c.checkAgreePrivacyCondition() || (a || (B.Util.alert(c.ALERT_AGREE_PRIVACY), c.agreePrivacy.focus()), !1) : (a || (B.Util.alert(c.ALERT_AGREE_SERVICE), c.agreeService.focus()), !1)
                },
                e = function() {
                    if (b) {
                        c.agreeService.prop("checked") && c.agreePrivacy.prop("checked") ? c.signFormSubmitPre.prop("disabled", "") : c.signFormSubmitPre.prop("disabled", "disabled")
                    }
                },
                f = function(a) {
                    var b = c.convertPossibleUsername(c.userNameInput.val());
                    return a || c.userNameInput.val(b), c.checkUsername(c.userNameInput.val()) ? !!c.checkEmail(c.emailInput.val()) || (a || c.emailInput.focus(), !1) : (a || c.userNameInput.focus(), !1)
                },
                g = function() {
                    var a = d(!0);
                    a && (a = f(!0)), a ? c.signFormSubmit.prop("disabled", "") : c.signFormSubmit.prop("disabled", "disabled")
                },
                h = null,
                i = function() {
                    b && null == h && (g(), h = setInterval(function() {
                        g()
                    }, 500))
                },
                j = function() {
                    b && h && (clearInterval(h), h = null)
                },
                k = function() {
                    c.termsStepUser.fadeOut(200, function() {
                        c.termsStepPolicy.fadeIn(200), j()
                    })
                },
                l = function() {
                    c.termsStepPolicy.fadeOut(200, function() {
                        c.termsStepUser.fadeIn(200), i()
                    })
                };
            this.signFormSubmitPre.click(function() {
                return !!d() && (l(), !1)
            }), this.signFormBack.click(function() {
                return k(), !1
            }), this.signFormSubmit.click(function() {
                return !!d() && (f(!1) && c.checkExistEmail(c.emailInput.val(), function(a) {
                    a ? c.signForm.submit() : j()
                }), !1)
            }), this.agreeService.on("change", function(b) {
                b.target.checked ? a(".ico_brunch, .ico_brunch_v1", c.agreeServiceLabel).addClass("ico_choiced") : (a(".ico_brunch, .ico_brunch_v1", c.agreeServiceLabel).removeClass("ico_choiced"), c.agreeAll.prop("checked", !1).trigger("change")), e()
            }), this.agreePrivacy.on("change", function(b) {
                b.target.checked ? a(".ico_brunch, .ico_brunch_v1", c.agreePrivacyLabel).addClass("ico_choiced") : (a(".ico_brunch, .ico_brunch_v1", c.agreePrivacyLabel).removeClass("ico_choiced"), c.agreeAll.prop("checked", !1).trigger("change")), e()
            });
            var m = a.proxy(function(c) {
                b ? this.agreeAdInfoFunc(c) : c ? a(".agree_ad_info").show() : a(".agree_ad_info").hide(), _tiq && _tiq.push(["__trackClick", "agree_all", ""])
            }, this);
            this.agreeAd.on("change", function(b) {
                var d = b.target.checked;
                d ? a(".ico_brunch, .ico_brunch_v1", c.agreeAdLabel).addClass("ico_choiced") : (a(".ico_brunch, .ico_brunch_v1", c.agreeAdLabel).removeClass("ico_choiced"), c.agreeAll.prop("checked", !1).trigger("change")), m(d)
            }), this.agreeAll.on("change", function(b) {
                b.target.checked ? a(".ico_brunch, .ico_brunch_v1", c.agreeAllLabel).addClass("ico_choiced") : a(".ico_brunch, .ico_brunch_v1", c.agreeAllLabel).removeClass("ico_choiced")
            }), this.agreeAll.on("click", function(a) {
                var b = a.target.checked;
                c.agreeService.prop("checked", b).trigger("change"), c.agreePrivacy.prop("checked", b).trigger("change"), c.agreeAd.prop("checked", b).trigger("change")
            }), this.userNameInput.on("keyup", function(a) {
                var b = c.userNameInput.val();
                b.length > 30 && c.userNameInput.val(b.substr(0, 30))
            }), e()
        },
        convertPossibleUsername: function(a) {
            return a.trim().replace(/\s{2,}/g, " ")
        },
        checkUsername: function(a) {
            return a && "" != a ? a.length < 2 || a.length > 30 ? (this.userNameWrap.addClass("regist_deny"), this.userNameWrap.removeClass("regist_allow"), this.userNameError.html(this.ERROR_USERNAME_LENGTH).show(), !1) : this.REGEXP_USERNAME.test(a) ? (this.userNameWrap.removeClass("regist_deny"), this.userNameWrap.addClass("regist_allow"), this.userNameError.hide(), !0) : (this.userNameWrap.addClass("regist_deny"), this.userNameWrap.removeClass("regist_allow"), this.userNameError.html(this.ERROR_USERNAME).show(), !1) : (this.userNameWrap.addClass("regist_deny"), this.userNameWrap.removeClass("regist_allow"), this.userNameError.html(this.ALERT_USERNAME).show(), !1)
        },
        checkEmail: function(a) {
            return a && "" != a ? this.REGEXP_EMAIL.test(a) ? (this.emailWrap.removeClass("regist_deny"), this.emailWrap.addClass("regist_allow"), this.emailError.hide(), !0) : (this.emailWrap.addClass("regist_deny"), this.emailWrap.removeClass("regist_allow"), this.emailError.html(this.ERROR_EMAIL).show(), !1) : (this.emailWrap.addClass("regist_deny"), this.emailWrap.removeClass("regist_allow"), this.emailError.html(this.ALERT_EMAIL).show(), !1)
        },
        checkAgreeServiceCondition: function() {
            return this.agreeService.get(0).checked
        },
        checkAgreePrivacyCondition: function() {
            return this.agreePrivacy.get(0).checked
        },
        checkExistEmail: function(a, c) {
            var c = c || function() {},
                d = {
                    kakao: "kakaotalk",
                    facebook: "facebook",
                    twitter: "twitter"
                };
            if (a && "" != a.trim()) {
                var e = this;
                e.signFormForgotAnchor.attr("href", e.forgotEmailUrl), B.Util.ajax({
                    url: B.Config.apiUrl + "/v1/auth/email/duplicate?email=" + encodeURIComponent(a),
                    type: "get",
                    success: function(f) {
                        if (f.data && f.data.duplicate) {
                            e.emailWrap.addClass("regist_deny"), e.emailWrap.removeClass("regist_allow");
                            var g = d[f.data.provider],
                                h = '<span class="ico_brunch_v1 ico_' + g + '">' + g + "</span>",
                                i = b ? e.ERROR_EMAIL_ALREADY_EXIST_MOBILE : e.ERROR_EMAIL_ALREADY_EXIST,
                                j = i.replace("${providerString}", h);
                            e.emailError.html(j).show(), e.signFormForgotAnchor.attr("data-error-email", a.trim()), e.signFormRetry.addClass("activated"), e.signFormForgot.addClass("activated"), e.signFormSubmit.text("새로 가입하기"), b && e.mobileSubmitWrap.addClass("activated"), c(!1)
                        } else e.emailWrap.addClass("regist_allow"), e.emailWrap.removeClass("regist_deny"), e.emailError.hide(), c(!0)
                    },
                    error: function(a) {
                        return c(!1), 602 == a.status ? (B.Util.alert(e.ERROR_USER_ALREADY_AGREE), window.location.href = "/") : 400 == a.status && B.Util.alert(a.responseJSON.extra || a.responseJSON.desc || "알 수 없는 오류가 발생했습니다.\n다시 시도해 주세요."), !0
                    }
                })
            }
        }
    }, B.Sign.Termsofuse = new c
}(jQuery);